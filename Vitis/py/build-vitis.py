# Opsero Electronic Design Inc. (C) 2025

# Script to create Vitis workspace from XSA file and add an application.

# build-vitis.py â€” Vitis (Unified IDE) 2024.1+ batch script
# Usage:
#   vitis -source build-vitis.py [<target>] <path/to/args.json> <path/to/data.json>
#
# If <target> is omitted, the script lists all "baremetal": true designs from data.json and prompts.
#
# args.json schema (no target/workspace/vivado_proj/xsa_path here):
# {
#   "bd_name": "design_1",
#   "app_name": "app",
#   "app_template": "None",   # "None"/"" => no template; otherwise use exactly this template
#   "src": {
#     "all":   "common/src",
#     "mb":    "microblaze/src",
#     "zynq":  "zynq/src",
#     "zynqmp":"zynq/src",
#     "versal":"zynq/src"
#   },
#   "combine_bit_elf": true   # ignored here; used by make-boot.py later
# }

import os, sys, glob, json, shutil, zipfile, xml.etree.ElementTree as ET

# ---------------- utilities ----------------
def die(msg):
    print(f"ERROR: {msg}")
    sys.exit(1)

def info(msg):
    print(msg, flush=True)

def ensure_dir(p):
    os.makedirs(p, exist_ok=True); return p

def copy_tree(src_dir, dst_dir):
    if not src_dir: return 0
    src_dir = os.path.normpath(src_dir)
    if not os.path.isdir(src_dir):
        info(f"NOTE: source folder '{src_dir}' not found; skipping.")
        return 0
    count = 0
    for root, _, files in os.walk(src_dir):
        rel = os.path.relpath(root, src_dir)
        out_root = os.path.join(dst_dir, rel) if rel != "." else dst_dir
        os.makedirs(out_root, exist_ok=True)
        for f in files:
            shutil.copy2(os.path.join(root, f), os.path.join(out_root, f))
            count += 1
    return count

# ---------------- board.h generator ----------------
def create_board_h(board_name, target_dir):
    vitis_root = os.environ.get("XILINX_VITIS", "")
    vitis_ver = os.path.basename(vitis_root) if vitis_root else "UNKNOWN"
    bn_up = str(board_name).upper()
    ensure_dir(target_dir)
    path = os.path.join(target_dir, "board.h")
    with open(path, "w", encoding="utf-8") as fd:
        fd.write("/* This file is automatically generated */\n")
        fd.write("#ifndef BOARD_H_\n#define BOARD_H_\n")
        fd.write(f"#define BOARD_NAME \"{bn_up}\"\n")
        fd.write(f"#define VITIS_VERSION \"{vitis_ver}\"\n")
        fd.write(f"#define BOARD_{bn_up} 1\n")
        fd.write("#endif\n")
    info(f"Generated {path}")

# ---------------- detect arch/CPU from XSA (parse .hwh inside XSA zip) ----------------
CPU_VLNV_HINTS = {
    "microblaze":         "xilinx.com:ip:microblaze",
    "processing_system7": "xilinx.com:ip:processing_system7", # Zynq-7000
    "zynq_ultra_ps_e":    "xilinx.com:ip:zynq_ultra_ps_e",    # ZynqMP
    "versal_cips":        "xilinx.com:ip:versal_cips",        # Versal
}

def _find_modules(xml_bytes):
    try:
        root = ET.fromstring(xml_bytes)
    except ET.ParseError:
        return []
    out = []
    for mod in root.findall(".//MODULE"):
        vlnv = (mod.get("VLNV") or mod.get("VLNV_NAME") or "").lower()
        inst = (mod.get("INSTANCE") or mod.get("NAME") or "")
        if vlnv and inst:
            out.append((inst, vlnv))
    return out

def detect_arch_and_cpu_from_xsa(xsa_path,bd_name):
    """
    Returns:
      arch in {"microblaze","zynq","zynqmp","versal"}
      cpu_hint: instance name for MB ("microblaze_0") or core label for PS ("a9-0","a53-0","a72-0","r5-0")
    """
    if not zipfile.is_zipfile(xsa_path):
        return None, None
    modules = []
    with zipfile.ZipFile(xsa_path, "r") as z:
        for name in z.namelist():
            if name.lower() == f"{bd_name}.hwh":
                try:
                    modules += _find_modules(z.read(name))
                except KeyError:
                    pass
    vlnvs = [v for _, v in modules]
    has = {k: any(h in v for v in vlnvs) for k, h in CPU_VLNV_HINTS.items()}

    if has["microblaze"]:
        mb_inst = next((n for n, v in modules if "microblaze" in v), "microblaze_0")
        return "microblaze", mb_inst
    if has["versal_cips"]:
        core = "psv_cortexa72_0"
        return "versal", core
    if has["zynq_ultra_ps_e"]:
        core = "psu_cortexa53_0"
        return "zynqmp", core
    if has["processing_system7"]:
        return "zynq", "ps7_cortexa9_0"
    return None, None

# ---------------- Vitis API (must run under `vitis -source`) ----------------
try:
    import vitis
except ImportError:
    die("Must be run with the Vitis CLI:  vitis -source build-vitis.py [<target>] <args.json> <data.json>")

# ---------------- CLI & data.json handling ----------------
def parse_cli(argv):
    args = argv[1:]
    if args and args[0] == "--":
        args = args[1:]
    if len(args) not in (2, 3):
        die("Usage: vitis -source build-vitis.py [<target>] <path/to/args.json> <path/to/data.json>")

    if len(args) == 2:
        target = None
        args_json_path, data_json_path = args
    else:
        target, args_json_path, data_json_path = args

    args_json_path = os.path.normpath(args_json_path)
    data_json_path = os.path.normpath(data_json_path)
    if not os.path.isfile(args_json_path):
        die(f"args.json not found: {args_json_path}")
    if not os.path.isfile(data_json_path):
        die(f"data.json not found: {data_json_path}")
    return target, args_json_path, data_json_path

def pick_target_interactively(data_json_path):
    with open(data_json_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    designs = data.get("designs", [])
    # filter to baremetal == true
    bare = [d for d in designs if d.get("baremetal", False)]
    if not bare:
        die("No bare-metal designs found in data.json")

    # Make a quick lookup of group labels to names
    groups = {g.get("label"): g.get("name") for g in data.get("groups", [])}

    print("Select a target:")
    for i, d in enumerate(bare, start=1):
        grp_label = d.get("group")
        grp_name = groups.get(grp_label, grp_label or "")
        label = d.get("label", "?")
        board = d.get("board", d.get("boardname", ""))
        print(f"  {i:2d}) {label:<12}  {board:<20}  [{grp_name}]")

    while True:
        try:
            sel = input("Enter number: ").strip()
        except EOFError:
            die("No selection provided (EOF).")
        if not sel.isdigit():
            print("Please enter a number from the list.")
            continue
        idx = int(sel)
        if 1 <= idx <= len(bare):
            chosen = bare[idx - 1]
            return chosen.get("label")
        else:
            print("Out of range. Try again.")

def load_design_entry(data_json_path, target_label):
    with open(data_json_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    for d in data.get("designs", []):
        if d.get("label") == target_label and d.get("baremetal", False):
            return d
    die(f"Target '{target_label}' not found (or not baremetal) in data.json")

# ---------------- main ----------------
def main():
    # Parse CLI
    maybe_target, args_json_path, data_json_path = parse_cli(sys.argv)

    # If no target supplied, prompt from bare-metal designs
    if not maybe_target:
        maybe_target = pick_target_interactively(data_json_path)
        info(f"Chosen target: {maybe_target}")

    # Load args.json
    with open(args_json_path, "r", encoding="utf-8") as f:
        cfg = json.load(f)

    bd_name = cfg.get("bd_name")
    if not bd_name:
        die('args.json must include "bd_name".')

    app_name     = cfg.get("app_name", "test_app")
    app_template = cfg.get("app_template")
    if app_template is not None and app_template.strip().lower() in ("none", ""):
        app_template = None

    src_map   = cfg.get("src", {}) or {}
    src_all   = src_map.get("all")
    src_mb    = src_map.get("mb")
    src_zynq  = src_map.get("zynq")
    src_zynqmp= src_map.get("zynqmp")
    src_versal= src_map.get("versal")

    # Look up design metadata from data.json (for board.h etc.)
    design = load_design_entry(data_json_path, maybe_target)
    board_name_for_header = design.get("boardname", design.get("board", maybe_target))

    # Derived paths from target
    cwd         = os.getcwd()
    target      = maybe_target
    workspace   = os.path.normpath(os.path.join(cwd, f"{target}_workspace"))
    vivado_proj = os.path.normpath(os.path.join(cwd, "..", "Vivado", target))
    xsa_path    = os.path.normpath(os.path.join(vivado_proj, f"{bd_name}_wrapper.xsa"))

    # Banner
    info("== Vitis workspace build (menu/json-driven) ==")
    info(f"target          : {target}")
    info(f"workspace       : {workspace}")
    info(f"vivado_proj     : {vivado_proj}")
    info(f"xsa_path        : {xsa_path}")
    info(f"bd_name         : {bd_name}")
    info(f"app_name        : {app_name}")
    info(f"app_template    : {app_template if app_template else 'None (minimal app)'}")
    info(f"boardname       : {board_name_for_header}")
    info(f"src.all         : {src_all if src_all else '(none)'}")
    info(f"src.mb          : {src_mb if src_mb else '(none)'}")
    info(f"src.zynq        : {src_zynq if src_zynq else '(none)'}")
    info(f"src.zynqmp      : {src_zynqmp if src_zynqmp else '(none)'}")
    info(f"src.versal      : {src_versal if src_versal else '(none)'}")

    if not os.path.isfile(xsa_path):
        die(f"XSA not found at: {xsa_path}")
    ensure_dir(workspace)

    # Detect architecture / CPU hint from XSA
    arch, cpu_hint = detect_arch_and_cpu_from_xsa(xsa_path,bd_name)
    if not arch:
        die("Could not detect architecture from XSA (MicroBlaze/Zynq/ZynqMP/Versal).")
    info(f"Detected arch   : {arch} (cpu/core hint: {cpu_hint})")

    # Create workspace, platform, domain, app
    client = vitis.create_client()
    try:
        client.set_workspace(workspace)

        plat_name = f"{target}_platform"
        info(f"Creating platform '{plat_name}' (cpu={cpu_hint}, os=standalone) ...")
        platform = client.create_platform_component(
            name=plat_name,
            hw_design=xsa_path,
            cpu=cpu_hint,
            os="standalone"
        )

        doms = platform.list_domains()
        if not doms:
            die("Platform has no domains after creation (unexpected).")
        domain_name = None
        for d in doms:
            if d.get("processor") == cpu_hint and d.get("os") == "standalone":
                domain_name = d["domain_name"]; break
        if not domain_name:
            domain_name = doms[0]["domain_name"]
        info(f"Using domain    : {domain_name}")

        info("Building platform ...")
        platform.build()

        xpfm = os.path.join(workspace, plat_name, "export", plat_name, f"{plat_name}.xpfm")
        if not os.path.isfile(xpfm):
            found = glob.glob(os.path.join(workspace, "**", f"{plat_name}.xpfm"), recursive=True)
            if found: xpfm = found[0]
        if not os.path.isfile(xpfm):
            die(f"Could not locate platform .xpfm after build (looked for {xpfm}).")

        info(f"Creating application '{app_name}' ...")
        if app_template:
            info(f"  -> using template: {app_template!r}")
            app = client.create_app_component(
                name=app_name,
                platform=xpfm,
                domain=domain_name,
                template=app_template,
            )
        else:
            info("  -> creating with NO template (minimal app)")
            app = client.create_app_component(
                name=app_name,
                platform=xpfm,
                domain=domain_name,
            )

        # Copy sources
        app_root = os.path.join(workspace, app_name)
        app_src  = os.path.join(app_root, "src")
        ensure_dir(app_src)

        copied = 0
        if src_all:     copied += copy_tree(os.path.join(cwd, src_all), app_src)
        if arch == "microblaze" and src_mb:         copied += copy_tree(os.path.join(cwd, src_mb), app_src)
        elif arch == "zynq" and src_zynq:          copied += copy_tree(os.path.join(cwd, src_zynq), app_src)
        elif arch == "zynqmp" and src_zynqmp:      copied += copy_tree(os.path.join(cwd, src_zynqmp), app_src)
        elif arch == "versal" and src_versal:      copied += copy_tree(os.path.join(cwd, src_versal), app_src)
        info(f"Copied files    : {copied} into {app_src}")

        # Create board.h in app src
        create_board_h(board_name_for_header, app_src)

        # Build the app
        info("Building application ...")
        app.build()

        info("\n== DONE ==")
        info(f"Workspace : {workspace}")
        info(f"Platform  : {plat_name}")
        info(f"Domain    : {domain_name}")
        info(f"App       : {app_name}")
        info(f"Open IDE  : vitis -w {workspace}")

    finally:
        try:
            client.dispose()
        except Exception:
            pass

if __name__ == "__main__":
    main()
